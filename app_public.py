import streamlit as st
import google.generativeai as genai
from PyPDF2 import PdfReader
from docx import Document

# --- FONCTIONS DE L'APPLICATION ---
def extract_text_from_pdf(pdf_file):
    reader = PdfReader(pdf_file)
    text = ""
    for page in reader.pages:
        text += page.extract_text()
    return text

def extract_text_from_docx(docx_file):
    doc = Document(docx_file)
    text = ""
    for para in doc.paragraphs:
        text += para.text + "\n"
    return text

def analyze_documents(resume_text, job_description):
    # Configure l'API ici pour s'assurer qu'elle est pr√™te pour la requ√™te
    if 'api_key' in st.session_state and st.session_state.api_key:
        genai.configure(api_key=st.session_state.api_key)
    else:
        st.error("La cl√© API n'est pas configur√©e.")
        return ""
        
    custom_prompt = f"""
    Analysez le CV suivant en fonction de la description de poste fournie. V√©rifiez rigoureusement chaque ligne de la description de poste et √©valuez la correspondance exacte avec le CV. 
    Respectez strictement les normes ATS et attribuez des scores uniquement aux √©l√©ments corrects. Identifiez :
    1. Le pourcentage de correspondance entre le CV et la description de poste
    2. Une liste pr√©cise des mots-cl√©s manquants
    3. Une synth√®se finale de l'ad√©quation globale en 3 points
    4. Des recommandations concr√®tes pour am√©liorer le CV avec des exemples

    Pr√©sentez les r√©sultats dans l'ordre ci-dessus sans num√©rotation. 
    Conservez strictement ce format √† chaque analyse. 
    Ne modifiez surtout pas la structure du mod√®le.
    Titre obligatoire : Analyse de CV ATS

    Description de poste : {job_description}
    CV : {resume_text}
    """

    model = genai.GenerativeModel('gemini-1.5-flash')
    response = model.generate_content(custom_prompt)
    return response.text

def rephrase_text(text):
    if 'api_key' in st.session_state and st.session_state.api_key:
        genai.configure(api_key=st.session_state.api_key)
    else:
        st.error("La cl√© API n'est pas configur√©e.")
        return ""

    custom_prompt = f"""
    Reformulez le texte suivant selon les normes ATS en ajoutant des mesures quantifiables et des am√©liorations concr√®tes :
    Titre obligatoire : Texte reformul√©
    Texte original : {text}
    """

    model = genai.GenerativeModel('gemini-1.5-flash')
    response = model.generate_content(custom_prompt)
    return response.text

def display_resume(file):
    file_type = file.name.split('.')[-1].lower()
    if file_type == 'pdf':
        reader = PdfReader(file)
        text = ""
        for page in reader.pages:
            text += page.extract_text()
        st.text_area("Contenu du CV analys√©", text, height=400)
    elif file_type == 'docx':
        doc = Document(file)
        text = ""
        for para in doc.paragraphs:
            text += para.text + "\n"
        st.text_area("Contenu du CV analys√©", text, height=400)
    else:
        st.error("Format de fichier non support√©. Veuillez uploader un PDF ou DOCX.")

# --- CONFIGURATION DE LA PAGE ---
st.set_page_config(page_title="Syst√®me d'√âvaluation ATS", layout="wide")

# --- BARRE DE NAVIGATION ---
st.sidebar.title("Navigation")
page = st.sidebar.radio("Aller √†", ["Accueil", "Configuration", "Analyseur de CV", "R√©√©criture ATS", "Mod√®les ATS"])

# --- ROUTAGE DES PAGES ---
if page == "Accueil":
    st.title("Bienvenue sur l'Analyseur de CV ATS üëã")
    st.markdown("""
    > Bonjour et bienvenue ! Je suis **Kalilou I. Sangare**, professionnel MEAL et passionn√© de Data Science. 
    > Cette application a √©t√© d√©velopp√©e pour vous offrir un outil puissant et gratuit d'optimisation de CV. Elle est une adaptation et une am√©lioration d'un projet initial de **M. V-C-Sai-Santhosh**, pens√©e pour vous aider √† maximiser vos chances aupr√®s des syst√®mes de suivi des candidats (ATS).
    """)
    
    st.subheader("Comment utiliser cet outil ?")
    st.info("""
    **√âtape 1 : Configurez votre cl√© API**
    - Allez dans l'onglet **Configuration**.
    - Entrez votre cl√© API personnelle de Google Gemini pour activer l'intelligence artificielle. C'est 100% gratuit et s√©curis√©.

    **√âtape 2 : Analysez votre CV**
    - Rendez-vous sur **Analyseur de CV**.
    - Collez la description du poste que vous visez et t√©l√©chargez votre CV.
    - Obtenez instantan√©ment un pourcentage de correspondance, les mots-cl√©s manquants et des conseils d'am√©lioration.

    **√âtape 3 : Optimisez votre contenu**
    - Utilisez la page **R√©√©criture ATS** pour reformuler des sections de votre CV avec des termes percutants et des donn√©es quantifiables.

    **√âtape 4 : Inspirez-vous de mod√®les**
    - Explorez la section **Mod√®les ATS** pour t√©l√©charger des templates de CV d√©j√† optimis√©s.
    """)
    
    st.markdown("---")
    st.success("Nous esp√©rons que cet outil vous sera pr√©cieux dans votre recherche d'emploi. Optimisez votre CV et d√©crochez le poste de vos r√™ves !")

elif page == "Configuration":
    st.title("üîë Configuration de l'API Key")
    st.info("Pour utiliser les fonctionnalit√©s d'analyse, vous avez besoin d'une cl√© API de Google Gemini. Vous pouvez en obtenir une gratuitement sur [Google AI Studio](https://aistudio.google.com/app/apikey).")
    api_key = st.text_input("Entrez votre cl√© API Gemini", type="password", help="Votre cl√© ne sera conserv√©e que pour la dur√©e de votre session actuelle.")
    if st.button("Sauvegarder la cl√©"):
        if api_key:
            st.session_state.api_key = api_key
            st.success("Cl√© API sauvegard√©e avec succ√®s pour cette session !")
        else:
            st.warning("Veuillez entrer une cl√© API.")

elif page == "Analyseur de CV":
    st.title("üìÑüîç Syst√®me d'√âvaluation ATS")
    st.write("Analysez votre CV par rapport √† une description de poste pour optimiser votre candidature.")
    
    if 'api_key' not in st.session_state or not st.session_state.api_key:
        st.warning("Veuillez configurer votre cl√© API dans la page 'Configuration' pour utiliser cette fonctionnalit√©.")
    else:
        job_description = st.text_area("Collez ici la description de poste :")
        resume = st.file_uploader("Uploadez votre CV (PDF ou DOCX)", type=["pdf", "docx"])

        if resume:
            st.write("CV upload√© :")
            display_resume(resume)

        if st.button("Analyser la correspondance"):
            if job_description and resume:
                with st.spinner("Analyse en cours..."):
                    resume.seek(0)
                    file_type = resume.name.split('.')[-1].lower()
                    if file_type == 'pdf':
                        resume_text = extract_text_from_pdf(resume)
                    elif file_type == 'docx':
                        resume_text = extract_text_from_docx(resume)
                    
                    analysis = analyze_documents(resume_text, job_description)
                    
                    st.markdown(analysis)
                    
                    if "pourcentage de correspondance" in analysis.lower():
                        match_line = [line for line in analysis.split('\n') if "pourcentage de correspondance" in line.lower()][0]
                        match_percentage = ''.join(filter(str.isdigit, match_line))
                        if match_percentage:
                            st.write(f"Correspondance avec le poste : {match_percentage}%")
                            st.progress(int(match_percentage))

                    st.success("Analyse termin√©e !")
            else:
                st.error("Veuillez saisir la description de poste et uploader un CV.")

elif page == "R√©√©criture ATS":
    st.title("üîÆ R√©√©criture ATS")
    st.write("Optimisez vos phrases pour passer les filtres ATS avec des formulations quantifiables.")

    if 'api_key' not in st.session_state or not st.session_state.api_key:
        st.warning("Veuillez configurer votre cl√© API dans la page 'Configuration' pour utiliser cette fonctionnalit√©.")
    else:
        text_to_rephrase = st.text_area("Texte √† reformuler :")
        
        if st.button("G√©n√©rer la r√©√©criture"):
            if text_to_rephrase:
                with st.spinner("R√©√©criture en cours..."):
                    rephrased_text = rephrase_text(text_to_rephrase)
                    st.write(rephrased_text)
                    st.success("R√©√©criture termin√©e !")
            else:
                st.error("Veuillez saisir le texte √† reformuler.")

elif page == "Mod√®les ATS":
    st.title("üìÑüìù Mod√®les ATS Gratuits")
    st.write("T√©l√©chargez des mod√®les de CV optimis√©s pour les syst√®mes ATS :")

    templates = {
        "Mod√®le 1": "https://docs.google.com/document/d/1l7Q8m3T-VOaKZ0AtKBMhSe2ui_4vSGCk/edit",
        "Mod√®le 2": "https://docs.google.com/document/d/18JWABxOw9eQgY1LoGtqPPl3hxHAIuBXK/edit",
        "Mod√®le 3": "https://docs.google.com/document/d/1D4rXPvf9Z6XXDx3NdfDL8mQxTYmRJxf2/edit",
        "Mod√®le 4": "https://docs.google.com/document/d/13VMV-3jbdnnIIRXLhM8-xeaRvSW6ItEm/edit",
        "Mod√®le 5": "https://docs.google.com/document/d/1phlJSdiq2Jf5D4acoPW6GFMMHnElfQuy/edit",
        "Mod√®le 6": "https://docs.google.com/document/d/1rAuRb4QpVykfSNp1eaJE73qn0MIrlaD8/edit"
    }

    cols = st.columns(3)
    for index, (template_name, template_link) in enumerate(templates.items()):
        col = cols[index % 3]
        col.markdown(f"""
            <div style="text-align:center">
                <iframe src="https://drive.google.com/file/d/{template_link.split('/')[-2]}/preview" width="200" height="250"></iframe>
                <br>
                <a href="{template_link}" target="_blank">{template_name}</a>
            </div>
        """, unsafe_allow_html=True)